There is a continuation of the repository 'ForLearningPurpose'. Because this project use Java 11 and Spring 5 it was
necessary to create new repository. Later on, repository "ForLearningPurpose" will be used again.

Tech stack: Java 11, Tomcat 9.0.71, Spring 5.
.jsp is used instead of html just for learning purpose, although it is a legacy

This SumUp file continuous with Section 12.

Section 12 Controllers and Views, Model

@Controller anotacija uždedama virš klasės. @RequestMapping("/") nuoroda į kitą puslapį ir naudojam return, kuris bus naudojamas programos
kaip žymę kurį jsp file atidaryti. Jsp file <form action="".. nurodome /.. kuris nuris nurodo metodą controller'yje. Suteikus input name
, pastarąjį galime panaudoti kaip value ${param.YourElementName) (ex helloworld-form.jsp). MOdel naudojam kaip data transfer ir jsp faile
pateikiam ${SomeName}. NOrint panaudoti model ir gauti bei perduoti informacija, sukuriamas metodas, kur yra 2 arguments
(HttpServletRequest, Model). HttpServletRequest naudojamas gauti info su metodu .getParameter("YourElementName)". Atlikus norimus veiksmus
su gauta informacija, perduoti informacij1 atgal į view naudojam model metodą .addAttribute("SomeName", results(<-your variable name)(žr.13-14 eil).
Žiūrėti pavyzdį HelloWorldController, helloworld.jsp.

Section 13 Request Params and Request Mappings

Kad nereikėtų naudoti HttpServletRequest ir "sutaupyti" laiko bei kodo, galima naudoti @RequestParams anotacij1(Spring'o). Ši anotacija įdedama
metodo argumente -> methodName(@RequestParam("ElementName") VariableType VariableName, Model model).
Jeigu naudojami du controller'iai, kur @RequestMapping(sutrumpinimas RM) yra toks pats, tuomet kažkuriame Controller'yje naudojamas parent @RequestMapping, kuris
nurodomas virš klasės kartu su @Controller anotacija. Tuomet path bus toks /parentRM/chlidRM.

Section 14 Form tags and data binding

Žiūrėti student-confirmation, student-form file. Pastebėjas, kad get/set yra būtina, kuomet naudojamas submit formatas. užsiloadinus formatui iškviečiamas get metodas.Atlikus submit - set metodas.

Section 15 Spring MVC Form Validation - Applying Built-In Validation Rules

Norint apriboti kurį nors field, virš jo galima uždėti anotaciją @NotNull @Size (žr. customer). Vėliau, controller pacakge įterpiame @Valid
anotacija, kuri nusko atlikti validaciją visam objektui . Taip pat įterpiama BindingResult class, kuri laiko informaciją(erro) apie valdicaiją bei binding.
Prieš tai esančios validacijos neapsaugo nuo "space" problemos. Tam naudojamas kitas metodas, kuris pasileidžia pirmas.
@InitBinder anotacija, kuri palaiko validacijos bei indentifikuoja WEbDataBinder metodus. TUomet kaip parametras naudojamas WebDataBidner, kuris susieja puslapio užklausų informaciją su beans.
Sukuriamas StringTrimmerEditor, kuris panaikina trailing bei leading "space". Iškviečias webdatabidner metodas registercustomeditor, kuris pritaiko tam tikrus formato pakitimus tik tam tikram laukui ar formatui
, šiuo atveju( String ir naudojam stringtimmereditor).

Section 16 Spring MVC form validation - validating number ranges and regular expressions.

Norint įvesti apribojimus skaičiams, rašome anotacijas NotNull, Min, Max. Norint
patikrinti ar not null, reikia naudoti Integer, o ne int. Norint apsisaugoti nuo string įvedimo į number,
override error klaidą į aiškesnę. Tam sukuriame messages.properties , kur pradžia typeMismatc(a must).
Toliau spring-mvc-demo-servlet sukuriame bean ir kad skanuotų iš messages.properties.
Norint įvesti Regular Expressions apribojimą - naudojame @Pattern ir regex.{} <- nurodytas skaičius nusako raidžių/skaičių kiekį.(pvz:(regexp="^[a-zA-Z0-9]{5}", message = "only 5 chars/digits"))

Section 17 Spring MVC form validation - creating custom validation rules

Kuriant anotaciją, prieš klasės pavadinimą uždedamas @interface, kuris nurodo, jog čia bus kuriamas custom annotation. Virš klasės nurodome anotaciją @Constraint ir nurodome klasę, kurioje yra mūsų validacijos logika (CourseCodeConstraintValidator).
@Target anotacija naujodama tam, kad nurodyti kur pritaikyti šią anotaciją(skliausteliuose nurodome pvz: ElementType.method/field).
@Retention anotacija naudojama tam, kad nurodyti kuomet turi veikti ši anotacija pvz RetentionPolicy.Runtime. <- nurodo kad veiks programos viso paleidimo metu.
Kad nereikėtų hardcodint, nurodome default value ir message sukurdami metodus. Taip pat, galime nustatyti default groups, kuris sugrupuoja validacijos constraints.
O default payloads metode galime nurodyti papildomą informaciją apie error.
    Sukūrus anotaciją (žr. CourseCode), sukuriam helper class, kur yra validacijos logika. Šiuo atveju - CourseCodeConstraintValidator. Šioje klasėje implement'inam ConstrainValidator,
kur<> nurodome mūsų anotaciją (CourseCode) ir data type, kurią validuosime. Gautųsi <CourseCode, String>.
Tuomet atliekame ovveride initialize ir isValid metodų.
    initialize metode paduodame mūsų anotaciją kaip argumentą. Šis metodas reikalinga inicializuoti anotaciją.
Metodo viduje prilyginame .value() mūsų sukurtam kintamajam,kuris naudojamas patikrinti ar suvestas value praeina validaciją.
    isValid kaip argumentus paduotas String theCode(HTML Form data entered by the user) ir constrainValidatorContext(helper class for additional error messages)
metodo logika: jeigu theCode prasideda su mūsų anotacijos value, tuomet gražinam true. Jeigu result true, tuomet validacija praeita.
    Paleidus programą, pirmiausia nuskaitomas anotacijos message, o po to su juo value.

Section 18 Introduction to hibernate

Hibernate background'e naudoja jdbc. Palengvina komunikaciją tarp paleisto apps'o bei DB. Taip pat, hibernate suteikia object-to-relational mapping (ORM)

Section 19 Setting up hibernate development environment

Connection name = DriverManager.getConnection(url, user, pass) <- naudojamas prisijungti prie mysql. Visgi, bus naudojamas hibernate.cfg.xml

Section 20 Hibernate configuration with annotations

@Entity yra java klasė, kuri yra susieta su duomenų bazės lentele. T.y, kad duomenis būtų galima perkelti ir gauti atgal to objekto.
@Table(name = "") ir parašom pavadinimą lentelės. @Id anotacija reikalinga tam, kad parodyti jog field yra primary key. @Colum(name="") nurodome duomenų bazės atitinkamą stulpenį į kurį
talpinsime to field informaciją.

Section 21 Hibernate CRUD features
    Kaip create object ir nusiųsti į duomenų bazę žr. PrimaryKeyDemo. Pastebėjimas: .configure nebūtina nurodyti hibernate.cfg.xml pavadinimą, nes jis yra toks by default
Jeigu nenurodysime kaip sukurti id, tuomet sukurs random primary key. Jeigu nurodome anotaciją @GeneratedValue(strategy = GenerationType.IDENTITY), tuomet primary key
kurs pagal duomenų bazės parametrus. Taip pat, DB galima nurodyti nuo kurio id number pradėt skaičiuoti primary key (pvz ALTER TABLE hb_student_tracker.student AUTO_INCREMENT=3000).
session.getTransaction().commit() naudojam jeigu atliekamas veiksmas, kuris modifikuoja DB, nes tuomet operaciją perduodam į DB.
    GET naudojam .get metodą, kur galim nurodyti objekto .getId ar panašiai.(žr. ReadStudentDemo) Taip pat galim naudoti Querying Objects, kur naudojamas .createQuery
ir rašoma sql užklausa. SVARBU: norint toliau naudoti užklausoje objektą, reikia sukurti jam alias, nes kitaip mes leak connection error. pvz from Student stu ....
    UPDATE naudojam seterius arba Ouerying objects. Gale metodo reikia panaudoti .executeUpdate(). Taip pat, svarbu atlikti commit.
    DELETE naudojam .delete komandą arba querying.

Section 22 Hibernate advanced mappings
Yra OneToOne, OneToMany, ManyToMany sąryšis
Pirmary key (PK) yra,dažniausiai, unikalus skaičius ar skaičių kombinaciją tai eilutei. Foreign key (FK) id, kuris skirtas susieti su kita lentele. Cascade yra tuomet, kai
tą pačią užklausą/operaciją pritaikai ne tik pagr. lentelei, bet ir susietai lentelei su pagr lentele. Žinoma, jeigu yra ManyToMany ryšys, tai cascade ne visada yra tinkamas.
Cascade galima konfiguruoti. Fetch/retrieve data yra eager and lazy. Eager kuomet gauni visą informaciją, o lazy tik kuomet yra užklausa.
Uni-Directional kuomet iš pagr. lentelės pasieki susietą lentelę. Bi-directional, kuomet iš pagr. lentelės pasieki susietą lentelę bei iš susietos lentelės gali pasiekti pagr.

Section 23 hibernate advanced mappings - @OneToOne

    Norint susieti dvi lenteles, reikia pagr. lentelėje turėti Foreign key. Foreign key, kitoje lentelėje bus primary key.
    Entity lifecycle: Detach - jeigu detached, tuomet nėra asociajuojamas su Hibernate sesija. Merge - Jeigu buvo atjungas nuo sesijos
tuomet vėl bus prijungtas prie sesijos. Persist - naujus entity perkelia į valdymo būsena. Toliau flush/commit išsaugos duomenų bazėje.
Remove - Ištrina entity. Sekantis flush/ commit ištrins iš duomenų bazės. Refresh - Užkrauna objektą iš DB. Apsaugo nuo pasenusių duomenų.
    Cascade tipai. Persist - jeigu entity buvo išsaugotas, tuomet susijęs entity irgi bus išsaugotas. Remove - jeigu entity buvo ištrintas, tuomet
susijęs entity (kitoje lentelėje) irgi bus ištrintas. Refresh - abu susiję entity bus atnaujinti. Detach - jeigu vienas entity atjungtas nuo sesijos
tada ir kitas entity atjungiamas nuo sesijos. Merge -  jeigu vienas entity merged tuomet susijęs entity irgi merged. All - visi prieš tai išvardinti tipai.
    Kuriant entity svarbu nurodyti relationship tarp lentelių uždedant anotacija virš klasės. Toliau viskas kuriama taip pat, tik tiek, kad kuriant pagr. lentelės
FK atliekam set metodą.